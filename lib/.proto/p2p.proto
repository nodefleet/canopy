syntax = "proto3";
package types;

option go_package = "github.com/canopy-network/canopy/p2p";
import "peer.proto";
import "google/protobuf/any.proto";

// *****************************************************************************************************
// This file is auto-generated from source files in `/lib/.proto/*` using Protocol Buffers (protobuf)
//
// Protobuf is a language-neutral, platform-neutral serialization format. It allows users
// to define objects in a way thatâ€™s both efficient to store and fast to transmit over the network.
// These definitions are compiled into code that *enables different systems and programming languages
// to communicate in a byte-perfect manner*
//
// To update these structures, make changes to the source .proto files, then recompile
// to regenerate this file.
// These auto-generated files are easily recognized by checking for a `.pb.go` ending
// *****************************************************************************************************
//_
//_
//_
// Enveloper is a generic wrapper over a proto.message for the P2P module to handle
// Envelopes are first used to wrap bytes into a Packet, Ping, or Pong
// Then later is used to wrap a Packet.bytes into proto.Message
message Envelope {
  // payload: is a generic proto.message
  google.protobuf.Any payload = 1;
}

// A Packet is a part of a message (or the entire message) that is associated with a specific stream topic and includes an EOF signal
message Packet {
  // stream_id: the identifier of the stream/topic that this packet belongs to, used for multiplexing
  Topic stream_id = 1; // @gotags: json:"streamID"
  // eof: indicates whether this is the last packet of the message (EOF = true) or if more packets will follow (EOF = false)
  bool eof = 2;
  // bytes: the actual message data transferred in this packet. It could represent the entire message or just a part of it
  bytes bytes = 3;
}

// PeerBookRequest is a peer exchange request message that enables new peer discovery via swapping
message PeerBookRequestMessage{}

// PeerBookResponseMessage is a peer exchange response message sent back after receiving a PeerBookRequestMessage
// The peer will select some random peers from their PeerBook to reply with
message PeerBookResponseMessage{
  // book: randomly selected peers to exchange with the requester peer
  repeated BookPeer book = 1;
}

// BookPeer is the peer object held and saved in the peer book for persisted peer connectivity and exchange
// Peer or Address book: A collection of peers or network addresses that a node uses to discover and connect with other nodes in the network.
// This book helps nodes keep track of available peers for communication and maintaining network connectivity.
message BookPeer {
  // address: is the peer address object that holds identification and metadata about the peer
  PeerAddress Address = 1; // @gotags: json:"address"
  // consecutive_failed_dial: is a churn management counter that tracks the number of consecutive failures
  // enough consecutive fails, the BookPeer is evicted from the book
  int32 consecutive_failed_dial = 2; // @gotags: json:"consecutiveFailedDial"
}